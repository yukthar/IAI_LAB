import random

def initialize_board(n):
    """Initialize a random board with one queen in each column."""
    board = [-1] * n
    for col in range(n):
        row = random.randint(0, n - 1)
        board[col] = row
    return board

def print_board(board):
    """Print the chessboard with queens placed."""
    n = len(board)
    for row in range(n):
        for col in range(n):
            if board[col] == row:
                print("Q", end=" ")
            else:
                print(".", end=" ")
        print()
    print()

def calculate_attacks(board):
    """Calculate the number of queen attacks on the board."""
    n = len(board)
    attacks = 0
    for col in range(n):
        for other_col in range(col + 1, n):
            row1, row2 = board[col], board[other_col]
            if row1 == row2 or abs(row1 - row2) == abs(col - other_col):
                attacks += 1
    return attacks

def hill_climbing(n, max_iterations):
    """Solve the 8-Queens Problem using Hill Climbing with a heuristic function."""
    current_board = initialize_board(n)
    current_attacks = calculate_attacks(current_board)
    
    for iteration in range(max_iterations):
        if current_attacks == 0:
            print("Solution found:")
            print_board(current_board)
            break
        
        best_board = current_board.copy()
        best_attacks = current_attacks
        
        for col in range(n):
            for row in range(n):
                if current_board[col] != row:
                    temp_board = current_board.copy()
                    temp_board[col] = row
                    temp_attacks = calculate_attacks(temp_board)
                    
                    if temp_attacks < best_attacks:
                        best_board = temp_board.copy()
                        best_attacks = temp_attacks
        
        if best_attacks >= current_attacks:
            print("Local minimum reached. Restarting...")
            current_board = initialize_board(n)
            current_attacks = calculate_attacks(current_board)
        else:
            current_board = best_board.copy()
            current_attacks = best_attacks

if __name__ == "__main__":
    n = 8  # Number of queens
    max_iterations = 1000  # Maximum iterations for hill climbing
    hill_climbing(n, max_iterations)
